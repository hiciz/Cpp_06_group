객체지향 프로그래밍 11주차 정리노트 11.13일 pair 변유빈, 유시연

예제 9-2

class Derived : public Base

Q. public Base가 파생 클래스인건가요?

A. 저는 그렇게 이해했습니다.

Q. Derived::f()를 호출하면 원래 함수가 아니라 파생 클래스의 함수가 호출이 되는건가요?

A. 오버라이딩 되었기에 기존 클래스가 아닌, 새로 파생된 클래스의 함수가 호출되는 것이 맞다고 생각합니다.

Q. 왜 *pBase의 값이 Base가 아니라 Derived가 나오는건가요?

A. pBase = pDer 로 업 캐스팅되었기 때문입니다.

*Base 함수들은 인터페이스 역할이고, 파생 클래스가 메인이다.

*동적 바인딩은 파생 클래스에 대해서만 행해진다.

→ 기본 클래스 포인터로 가상 함수를 호출했을 때 동적으로 오버라이딩한 파생 클래스의 함수를 찾아 실행이된다.

예제 9-3

Q. main() 함수 부분에서 bp = dp = gp = &g;라고 적으면 동적 바인딩과 상관없이 당연히 g의 값이 나오는 거 아닌가요?

A. 저도 그 부분이 의문이었습니다. bp = dp = gp 부분은 각각의 주소값들이 같다는 것을 의미하고 이 주소값들이 갖고있는 값이 객체g라는 것인데, 이 부분을 적어주지 않으면 오류가 나는 것이 아닐까 싶습니다.

예제 9-6

Q. delete bp; delete dp; 했을 때 어떤 결과가 나올지 예측해보자

A. ~Base() 소멸자 호출후에 ~Derived()가 실행될 것으로 생각된다.

A. Base나 파생 모두 소멸된다는 것을 알 수 있다.

예제 9-7(실습)

A. 일단 클래스 Adder와 Subtractor가 Calculator의 파생 클래스이기 때문에 :를 이용하여 작성해주었다.

A2. adder은 두 정수의 합을, subtractor은 두 정수의 차를 구하는 것이기 때문에 각각 int add(int a, int b) { return a + b; }와 int subtractor(int a, int b) { return a - b; }로 작성해주었다.

Q. 추상 클래스 형식 “Adder”와 “Subtractor”의 개체를 사용할 수 없다는 오류가 떴다. 이유가 무엇일까?

A4. Adder와 Subtractor은 Calculator에게 상속받아야 하는데, 이것을 각각의 이름으로 바꾸어서 오류가 난 거 같다. int add(int a, int b)가 아닌 int cala(int a, int b)로 바꾸고 int subtractor(int a, int b)를 int calc(int a, int b)로 바꾸었더니 정상적인 값이 출력되었다.
